<?xml version="1.0" encoding="UTF-8"?>
<project name="Flurry ANE Build Scripts" default="all">
	
<!--
Standard Ant Targets from "Ant Devlopers Handbook"
   (http://www.informit.com/articles/article.aspx?p=30183&seqNum=2)

   - init    sets properties for the entire build
   - prepare creates a build directory, test results directory, and so on
   - fetch   fetches your source code updates from a source code repository
   - compile compiles, obviously
   - test    executes JUnit tests and generates reports
   - jar     creates a JAR file
   - war     creates a WAR file
   - docs    generates JavaDocs documentation
   - deploy  copies or FTPs the JAR/WAR/EAR to a deployment machine

Steve Loughran, in "Ant In Anger," also suggests the following targets:

   - build        performs an incremental build
   - publish      to "output the source and binaries to any distribution site"
   - all          performs an entire build from start to finish
   - main         performs a default build; generally just a build and test
   - init-debug   is called from init to set up properties for a debug build
   - init-release is called from init to set up properties for a release build
   - staging      moves the complete project to a pre-production area
   
Also see https://wiki.apache.org/ant/TheElementsOfAntStyle
-->
	
	<target name="init" depends="-set-build-type"
		description="Define properties and check prerequisites">
		
		<property file="build.properties"/>
		<loadproperties srcfile="default.properties"/>
		
		<property name="name" value="Flurry"/>

		<property name="build.dir" location="${basedir}/build"/>
		<property name="build.android.dir" location="${build.dir}/android"/>
		<property name="build.default.dir" location="${build.dir}/default"/>
		<property name="build.ios.dir" location="${build.dir}/ios"/>
		
		<property name="swc.basedir" location="${basedir}/swc"/>

		<property name="ios.basedir" location="${basedir}/ios"/>
		<property name="ios.src.dir" location="${ios.basedir}/"/>
		<property name="ios.lib.dir" location="${ios.basedir}/"/>
		<property name="ios.build.dir" location="${ios.basedir}/build"/>
		
		<property name="android.basedir" location="${basedir}/android"/>
		<property name="android.src.dir" location="${android.basedir}/src"/>
		<property name="android.lib.dir" location="${android.basedir}/libs"/>
		<property name="android.build.dir" location="${android.basedir}/build"/>
		<property name="android.class.dir" location="${android.build.dir}/classes"/>
						
		<property name="flurry.android.version" value="4.2.0"/>
		<property name="flurry.ios.version" value="5.4.0"/>

		<property name="AIR.SDK.HOME" location="${AIR_SDK_HOME}"/>
	    <property name="ADT.JAR" location="${AIR.SDK.HOME}/lib/adt.jar"/>
		<taskdef resource="flexTasks.tasks" classpath="${AIR.SDK.HOME}/ant/lib/flexTasks.jar" />		
	</target>

	<!-- Ant doesnâ€™t do if/else very well, so we do both checks: is ${build.debug} true? is ${build.debug} false? -->
	<target name="-set-build-type" depends="-check-debug,-check-release"/>

	<!-- Check if ${debug} is true and if it is, set the properties below for a debug build -->
	<target name="-check-debug" if="${build.debug}">
	    <property name="iOS.library.build.type" value="Debug"/>
	</target> 

	<!-- Check if ${debug} is false and if it is, set the properties below for a release build -->
	<target name="-check-release" unless="${build.debug}">
	    <property name="iOS.library.build.type" value="Release"/>
	    <property name="build.debug" value="false"/>
   	    <property name="javac.debug" value="off"/>
	</target>
	
	<target name="prepare" depends="init"
		description="Prepare build environment">
		<mkdir dir="${android.build.dir}"/>
		<mkdir dir="${android.class.dir}"/>	    
   
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.android.dir}"/>
		<mkdir dir="${build.default.dir}"/>
		<mkdir dir="${build.ios.dir}"/>
	</target>
	
	<target name="clean" depends="init">
	    <delete dir="${build.ios.dir}"/>
	    <delete dir="${build.default.dir}"/>
	    <delete dir="${build.android.dir}"/>
	    <delete dir="${build.dir}"/>
	    	    
	    <delete dir="${android.class.dir}"/>
	    <delete dir="${android.build.dir}"/>
   	</target>
	
	<target name="compile" depends="ios,android,swc,swc,swc-default" description="Build native libraries"/>
	
	<target name="all" depends="compile,package" description="Full build of extension"/>
		
	<target name="ios" depends="prepare" description="Build iOS Library">
		<exec executable="xcodebuild" failonerror="true" dir="${ios.basedir}/${name}IosExtension">
			<arg value='-project'/>
			<arg value='${name}IosExtension.xcodeproj'/>
			<arg value='-target'/>
			<arg value='${name}IosExtension'/>
			<arg value='-configuration'/>
			<arg value='${iOS.library.build.type}'/>
			<arg value='SYMROOT=${ios.build.dir}'/>
		</exec>
		<copy file="${ios.build.dir}/${iOS.library.build.type}-iphoneos/lib${name}IosExtension.a" todir="build/ios" overwrite="true"/>
	</target>
		
	<target name="android" depends="prepare" description="Build android Library">
		<javac srcdir="${android.src.dir}" destdir="${android.class.dir}" includeantruntime="false" debug="${javac.debug}">
			<classpath>
				<pathelement location="${android.sdk}/platforms/android-7/android.jar"/>
				<pathelement location="${android.lib.dir}/FlashRuntimeExtensions.jar"/>
				<pathelement location="${android.lib.dir}/flurryAnalytics-${flurry.android.version}.jar"/>
			</classpath>
		</javac>

		<unzip src="${android.lib.dir}/flurryAnalytics-${flurry.android.version}.jar" dest="${android.class.dir}"/>
		<jar basedir="${android.class.dir}" destfile="${build.android.dir}/${name}AndroidExtension.jar"/>
	</target>
		
	<target name="swc" depends="prepare" description="Build swc library">
	    <build-swc type="actionscript"/>
	    <unpack-library name="actionscript" arch="ios"/>
	    <unpack-library name="actionscript" arch="android"/>
	</target>
	
	<target name="swc-default" depends="prepare" description="Build default swc library">
	    <build-swc type="default"/>
	    <unpack-library name="default" arch="default"/>
	</target>
	
	<macrodef name="build-swc">
	    <attribute name="type"/>
	    <sequential>
			<compc output="${build.dir}/@{type}/${name}.swc">
    	        <source-path path-element="@{type}/src"/>
			    <include-sources dir="@{type}/src" includes="**/*.as"/>

				<external-library-path dir="${AIR.SDK.HOME}/frameworks/libs/air" append="true">
                	<include name="airglobal.swc" />
	            </external-library-path>

				<load-config>compc.xml</load-config>
				<swf-version>25</swf-version>
				<target-player>14.0.0</target-player>
				<debug>${build.debug}</debug>
			</compc>
	    </sequential>
	</macrodef>

	<macrodef name="unpack-library">
		<attribute name="name"/>
		<attribute name="arch"/>
		<sequential>
			<unzip src="${build.dir}/@{name}/${name}.swc" dest="${build.dir}/@{arch}/" overwrite="true">
			    <patternset>
			        <include name="library.swf"/>
			    </patternset>
			    <flattenmapper/>
		    </unzip>
		</sequential>
	</macrodef>
	
	<target name="package" description="Create the extension package" depends="compile">
		<java jar="${ADT.JAR}" fork="true" failonerror="true">
			<jvmarg value="-Xmx512m"/>
			<jvmarg value="-Dsun.io.useCanonCaches=false"/>

			<arg value="-package"/>

			<arg value="-target"/>
			<arg value="ane"/>

			<arg value="build/${name}.ane"/>
			<arg value="extension.xml"/>

			<arg value="-swc"/>
			<arg value="${build.dir}/actionscript/Flurry.swc"/>
			
			<arg value="-platform"/>
			<arg value="iPhone-ARM"/>
			<arg value="-platformoptions"/>
			<arg value="platform.xml"/>
			<arg value="-C"/>
			<arg value="${build.ios.dir}/"/>
			<arg value="."/>
			
			<arg value="-platform"/>
			<arg value="Android-ARM"/>
			<arg value="-C"/>
			<arg value="${build.android.dir}/"/>
			<arg value="."/>
			
			<arg value="-platform"/>
			<arg value="Android-x86"/>
			<arg value="-C"/>
			<arg value="${build.android.dir}/"/>
			<arg value="."/>
			
			<arg value="-platform"/>
			<arg value="default"/>
			<arg value="-C"/>
			<arg value="${build.default.dir}/"/>
			<arg value="."/>
		</java>
	</target>
</project>
